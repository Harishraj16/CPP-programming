class Solution {
    public List<List<Integer>> permute(int[] nums) {
        boolean flag[] = new boolean[nums.length];
        List<List<Integer>> res = new ArrayList<>();
        ArrayList<Integer> ds = new ArrayList<>();
        helper(nums,flag,res,ds);
        return res;
    }
    public void helper(int[] arr,boolean[] flag,List<List<Integer>> res,ArrayList<Integer> ds){
        if(ds.size() == arr.length){
            res.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0;i<arr.length;i++){
            if(!flag[i]){
                ds.add(arr[i]);
                flag[i] = true;
                helper(arr,flag,res,ds);
                flag[i] = false;
                ds.remove(ds.size()-1);
            }
        }
    }
}

Brute force Approach:

#include<bits/stdc++.h>
vector < int > sortedArray(vector < int > a, vector < int > b) {
    set<int> st;
    for(int i=0;i<a.size();i++){
        st.insert(a[i]);
    }

    for(int i=0;i<b.size();i++){
        st.insert(b[i]);
    }

    vector<int> res;
    for(auto x:st){
        res.push_back(x);
    }

    return res;
}


Optimal Solution:

#include <bits/stdc++.h>
std::vector<int> sortedArray(std::vector<int> a, std::vector<int> b) {
    int n1=a.size();
    int n2=b.size();

    int i=0;
    int j=0;
    vector<int>result;
    while(i<n1 && j<n2){
        if(a[i]<= b[j]){
          if (result.size() == 0 || result.back() != a[i]) {
            result.push_back(a[i]);
          }
          i++;
        }
         else {
          if (result.size() == 0 || result.back() != b[j]) {
            result.push_back(b[j]);
          }
          j++;
        }
    }

    while(i<n1){
        if (result.size() == 0 || result.back() != a[i]) {
          result.push_back(a[i]);
        }
          i++;
        
    }

    while(j<n2){
                if (result.size() == 0 || result.back() != b[j]) {
            result.push_back(b[j]);
        }
            j++;
    }
    return result;
}

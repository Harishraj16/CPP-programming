// solution:1
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map<int,int> umap;
        for(int i=0;i<nums.size();i++){
            umap[nums[i]]++;
        }
        for(int i=0;i<nums.size();i++){
            if(umap[nums[i]]==1)
            return nums[i];
        }
        return 0;
    }
};

//Solution:2

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int xorr=0;
        for(int i=0;i<nums.size();i++)
        xorr=xorr^nums[i];

        return xorr;
    }

// most optimal solution:

#include<vector>

int getSingleElement(vector<int> &arr){
	int ans = 0;

    for(int i=1;i<arr.size();i = i+2){

        if(arr[i-1]!= arr[i]){

            ans = arr[i-1];

            return ans;

        }

    }

    return arr[arr.size()-1];	
}
};
